<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="lillet" xml:id="pyrus.commands.package">
 <info><title>package - create a packaged release in phar, tar, tgz or zip format</title></info>

 <section xml:id="pyrus.commands.package.intro">
  <info><title>Introduction</title></info>
  <note>
   <simpara>
    The <literal>package</literal> command is available through the developer tools.
    If you do not have the developer tools installed, simply run
   </simpara>
   <screen>php pyrus.phar package</screen>
   <simpara>
    and Pyrus will ask if you would like to install the developer tools.  If you
    assent with the word <literal>yes</literal>, Pyrus will automatically
    download them and install them for you.
   </simpara>
  </note>
  <para>
   The package command bundles up the files of a package and its package.xml
   into an archive for distribution.  It accepts a single optional argument, the
   path to a package.xml.
  </para>
  <para>
   If the optional path is not provided, the command
   searches for a file named <literal>package.xml</literal> in the current
   directory.  If this file is an older version 1.0, it also searches for
   <literal>package2.xml</literal> in the current directory, and uses that
   as the package file.  This allows creating packages that are compatible
   with ancient versions of PEAR older than version <literal>1.4.0</literal>
  </para>
  <para>
   If <literal>package.xml</literal> exists and is
   a PEAR2 package (requires pear installer version equal to or newer than
   <literal>2.0.0a1</literal>), the command will also look for a file
   in the current directory named <literal>package_compatible.xml</literal>.
   This file should be a package.xml customized for use by the PEAR Installer,
   and is automatically generated by the <link linkend="pyrus.commands.make">make</link>
   command unless explicitly prevented.  This file makes it possible for the
   PEAR Installer to install packages generated for Pyrus.
  </para> 
  <para>
   The created archive can be in any or all
   of the following formats:
   <orderedlist>
    <listitem><simpara>phar</simpara></listitem>
    <listitem><simpara>tar</simpara></listitem>
    <listitem><simpara>tgz</simpara></listitem>
    <listitem><simpara>zip</simpara></listitem>
   </orderedlist>
  </para>
  <para>
   The formats are requested by passing their name as an option like so:
   <screen>php pyrus.phar package --phar --tar --tgz --zip</screen>.
  </para>
  <para>
   The <literal>phar</literal> file format is a format that can be used to
   create self-installing archives, or even archives that are self-contained
   commands.  <literal>pyrus.phar</literal>, for instance, is a complete
   application that runs directly from its archive.  Due to security
   considerations, the ability to create executable phar archives is disabled
   by default.  To create a phar archive, the <literal>phar.readonly</literal>
   php.ini setting must be disabled like so:
  </para>
  <screen>php -dphar.readonly=0 pyrus.phar package --phar</screen>
  <para>
   The <literal>tar</literal> and <literal>tgz</literal> file formats are the
   formats familiar to users of PEAR.  <literal>tgz</literal> is a gzipped tar
   archive, and requires the <literal>zlib</literal> extension be enabled in
   order to create it.
  </para>
  <para>
   The <literal>zip</literal> file format is most familiar to Windows users.
  </para>
 </section>
 <section xml:id="pyrus.commands.package.pear2">
  <title>PEAR2 packages</title>
  <para>
   All packages designed for Pyrus automatically have <literal>PEAR2/Autoload.php</literal>,
   <literal>PEAR2/Exception.php</literal>, <literal>PEAR2/MultiErrors.php</literal>,
   and <literal>PEAR2/MultiErrors/Exception.php</literal> bundled so that
   these dependencies are available when a package is extracted without use of
   Pyrus to install it.  Packages designed for installation by the PEAR Installer
   and not for Pyrus do not bundle any dependencies.
  </para>
 </section>
 <section xml:id="pyrus.commands.package.signing">
  <title>Package signing</title>
  <para>
   Pyrus supports creating archives that have a mandatory signature using
   <literal>OpenSSL</literal> certificates such as those available from
   <link xlink:href="http://www.cacert.org">CACert</link>.  Signed archives
   cannot be processed without the presence of the <literal>openssl</literal>
   PHP extension.  In addition, a bug in the <literal>phar</literal> extension's
   verification of openssl signatures requires PHP version <literal>5.3.1</literal>
   or newer.  Creation of signatures only requires PHP version <literal>5.3.0</literal>
   or newer.
  </para>
  <para>
   To create a package signature, set the
   <link linkend="pyrus.configuration.user.opensslcert">openssl_cert</link>
   configuration variable to the path of your PKCS#12 certificate (generally
   saved with a file extension of <literal>p12</literal>), and the
   <link linkend="pyrus.configuration.user.handle">handle</link>
   configuration variable to your handle in package.xml.
  </para>
 </section>
 <section xml:id="pyrus.commands.package.stub">
  <title>--stub</title>
  <para>
   The <literal>--stub</literal> or <literal>-s</literal> option specifies
   a PHP script to use as the stub to a phar archive, and is ignored if
   <literal>--phar</literal> is not passed to the command.  The stub is a
   short executable script that is executed as a boot strap when a phar
   archive is passed to PHP like <screen>php pyrus.phar</screen>.  All stubs
   must end with the <literal>__HALT_COMPILER();</literal> directive to be a
   valid stub.
  </para>
  <para>
   If the <literal>--stub</literal> option is not explicitly specified and
   a phar archive is being created, Pyrus will look for a file named
   <literal>stub.php</literal> in the same directory as the package.xml, and
   will use that as the stub for the phar archive if found.
  </para>
  <para>
   Here is pyrus's stub:
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
if (version_compare(phpversion(), '5.3.0', '<')) {
    if (substr(phpversion(), 0, 5) != '5.3.0') {
        // this small hack is because of running RCs of 5.3.0
        echo "Pyrus requires PHP 5.3.0 or newer.\n";
        exit -1;
    }
}
foreach (array('phar', 'spl', 'pcre', 'simplexml') as $ext) {
    if (!extension_loaded($ext)) {
        echo 'Extension ', $ext, " is required\n";
        exit -1;
    }
}
try {
    Phar::mapPhar();
} catch (Exception $e) {
    echo "Cannot process Pyrus phar:\n";
    echo $e->getMessage(), "\n";
    exit -1;
}
function pyrus_autoload($class)
{
    $class = str_replace('_', '\\', $class);
    if (file_exists('phar://' . __FILE__ . '/php/' . implode('/', explode('\\', $class)) . '.php')) {
        include 'phar://' . __FILE__ . '/php/' . implode('/', explode('\\', $class)) . '.php';
    }
}
spl_autoload_register("pyrus_autoload");
$frontend = new \PEAR2\Pyrus\ScriptFrontend\Commands;
@array_shift($_SERVER['argv']);
$frontend->run($_SERVER['argv']);
__HALT_COMPILER();
    ]]>
   </programlisting>
  </para>
 </section>
 <section xml:id="pyrus.commands.package.extrasetup">
  <title>--extrasetup</title>
  <para>
   The <literal>--extrasetup</literal> or <literal>-e</literal> option
   is used to specify the path to a PHP script that is used to include
   files in the created packages that are not in the package.xml list of
   files.  This is used to create archives that are designed to be friendly to
   users simply <quote>trying before they buy</quote> the archive, or to provide
   support files needed to create self-installing archives.
  </para>
  <para>
   If the <literal>--extrasetup</literal> option is not explicitly specified,
   then Pyrus looks for a file named <literal>extrasetup.php</literal> in the
   same directory as the package.xml, and will use this if found.
  </para>
  <para>
   The extrasetup script should create a variable named <literal>$extrafiles</literal>
   that contains an associative array mapping relative path within the archive
   to an absolute path of a file on disk.
  </para>
  <para>
   Here is Pyrus's extrasetup, which demonstrates bundling of the required
   dependencies PEAR2_HTTP_Request and PEAR2_Console_Commandline:
  </para>
  <para>
   <programlisting role="php">
    <![CDATA[
<?php
/**
 * This file generates the pyrus.phar file and PEAR2 package for Pyrus.
 */
$rp = __DIR__ . '/../HTTP_Request/src/HTTP';
$cc = __DIR__ . '/../sandbox/Console_CommandLine/src/Console';
$extrafiles = array(
    'php/PEAR2/HTTP/Request.php' => $rp . '/Request.php',
    'php/PEAR2/HTTP/Request/Adapter.php' => $rp . '/Request/Adapter.php',
    'php/PEAR2/HTTP/Request/Adapter/Curl.php' => $rp . '/Request/Adapter/Curl.php',
    'php/PEAR2/HTTP/Request/Adapter/Http.php' => $rp . '/Request/Adapter/Http.php',
    'php/PEAR2/HTTP/Request/Adapter/Phpsocket.php' => $rp . '/Request/Adapter/Phpsocket.php',
    'php/PEAR2/HTTP/Request/Adapter/Phpstream.php' => $rp . '/Request/Adapter/Phpstream.php',
    'php/PEAR2/HTTP/Request/Exception.php' => $rp . '/Request/Exception.php',
    'php/PEAR2/HTTP/Request/Headers.php' => $rp . '/Request/Headers.php',
    'php/PEAR2/HTTP/Request/Listener.php' => $rp . '/Request/Listener.php',
    'php/PEAR2/HTTP/Request/Response.php' => $rp . '/Request/Response.php',
    'php/PEAR2/HTTP/Request/Uri.php' => $rp . '/Request/Uri.php',

    'php/PEAR2/Console/CommandLine.php' => $cc . '/CommandLine.php',
    'php/PEAR2/Console/CommandLine/Result.php' => $cc . '/CommandLine/Result.php',
    'php/PEAR2/Console/CommandLine/Renderer.php' => $cc . '/CommandLine/Renderer.php',
    'php/PEAR2/Console/CommandLine/Outputter.php' => $cc . '/CommandLine/Outputter.php',
    'php/PEAR2/Console/CommandLine/Option.php' => $cc . '/CommandLine/Option.php',
    'php/PEAR2/Console/CommandLine/MessageProvider.php' => $cc . '/CommandLine/MessageProvider.php',
    'php/PEAR2/Console/CommandLine/Exception.php' => $cc . '/CommandLine/Exception.php',
    'php/PEAR2/Console/CommandLine/Element.php' => $cc . '/CommandLine/Element.php',
    'php/PEAR2/Console/CommandLine/Command.php' => $cc . '/CommandLine/Command.php',
    'php/PEAR2/Console/CommandLine/Argument.php' => $cc . '/CommandLine/Argument.php',
    'php/PEAR2/Console/CommandLine/Action.php' => $cc . '/CommandLine/Action.php',
    'php/PEAR2/Console/CommandLine/Renderer/Default.php' => $cc . '/CommandLine/Renderer/Default.php',
    'php/PEAR2/Console/CommandLine/Outputter/Default.php' => $cc . '/CommandLine/Outputter/Default.php',
    'php/PEAR2/Console/CommandLine/MessageProvider/Default.php' => $cc . '/CommandLine/MessageProvider/Default.php',
    'php/PEAR2/Console/CommandLine/Action/Callback.php' => $cc . '/CommandLine/Action/Callback.php',
    'php/PEAR2/Console/CommandLine/Action/Counter.php' => $cc . '/CommandLine/Action/Counter.php',
    'php/PEAR2/Console/CommandLine/Action/Help.php' => $cc . '/CommandLine/Action/Help.php',
    'php/PEAR2/Console/CommandLine/Action/StoreFloat.php' => $cc . '/CommandLine/Action/StoreFloat.php',
    'php/PEAR2/Console/CommandLine/Action/StoreInt.php' => $cc . '/CommandLine/Action/StoreInt.php',
    'php/PEAR2/Console/CommandLine/Action/StoreString.php' => $cc . '/CommandLine/Action/StoreString.php',
    'php/PEAR2/Console/CommandLine/Action/StoreTrue.php' => $cc . '/CommandLine/Action/StoreTrue.php',
    'php/PEAR2/Console/CommandLine/Action/Version.php' => $cc . '/CommandLine/Action/Version.php',
);
    ]]>
   </programlisting>
  </para>
 </section>
</section>
