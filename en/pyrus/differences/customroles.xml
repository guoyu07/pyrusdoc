<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="lillet" xml:id="pyrus.differences.customroles">
 <info><title>Pyrus Custom File Roles: differences from PEAR</title></info>

 <section xml:id="pyrus.differences.customroles.overview">
  <info><title>Overview</title></info>
  <para>
   Custom file roles
   have changed substantially in Pyrus.  Fortunately, the usage of roles in package.xml
   remains unchanged, and Pyrus's expectation of custom role implementation does not conflict
   or overlap with PEAR's at all, so custom role packages can easily be designed
   to work with both PEAR and Pyrus.
  </para>
  <para>
   The biggest difference between how a custom role is implemented in Pyrus has
   to do with the new plugin system (documented <link linkend="pyrus.plugins">here</link>).
   Before reading any further, it may be a good idea to familiarize yourself with
   the way that plugins work in Pyrus by reading the documentation on plugins,
   then return back to finish reading about custom roles.
  </para>
  <para>
   Pyrus modifies the XML description file for custom file roles slightly, here
   is the PEAR version of a role:
  </para>
  <para>
   <programlisting role="xml">
    <![CDATA[
<role version="1.0">
 <releasetypes>php</releasetypes>
 <releasetypes>extsrc</releasetypes>
 <releasetypes>extbin</releasetypes>
 <releasetypes>zendextsrc</releasetypes>
 <releasetypes>zendextbin</releasetypes>
 <installable>1</installable>
 <locationconfig>php_dir</locationconfig>
 <honorsbaseinstall>1</honorsbaseinstall>
 <unusualbaseinstall />
 <phpfile>1</phpfile>
 <executable />
 <phpextension />
 <config_vars />
</role>    ]]>
   </programlisting>
  </para>
  <para>
   And the same role as implemented in Pyrus:
  </para>
  <para>
   <programlisting role="xml">
    <![CDATA[
<role version="2.0" xmlns="http://pear2.php.net/dtd/customrole-2.0">
 <name>php</name>
 <class>PEAR2\Pyrus\Installer\Role\Php</class>
 <releasetypes>php</releasetypes>
 <releasetypes>extsrc</releasetypes>
 <releasetypes>extbin</releasetypes>
 <releasetypes>zendextsrc</releasetypes>
 <releasetypes>zendextbin</releasetypes>
 <installable>1</installable>
 <locationconfig>php_dir</locationconfig>
 <honorsbaseinstall>1</honorsbaseinstall>
 <unusualbaseinstall />
 <executable />
</role>
    ]]>
   </programlisting>
  </para>
  <para>
   The most obvious difference is that Pyrus now includes the name of the role,
   PEAR extracts the role name from the name of the file (which in the
   example above was <literal>Php.xml</literal>).  In addition, the
   <literal>&lt;phpfile&gt;</literal> and <literal>&lt;phpextension&gt;</literal>
   elements have been removed.
  </para>
  <para>
   The details of new tags like &lt;class&gt; and &lt;autoloadpath&gt; are
   documented in the full documentation of custom roles
   <link linkend="pyrus.plugins.role">here</link>.
  </para>
  <para>
   This XML metadata file is identified by Pyrus through the use of the file role
   <literal>customrole</literal>, which is used in the custom role's package.xml.
   Here is an example from the &lt;contents&gt; of a package.xml:
  </para>
  <para>
   <programlisting role="xml">
    <![CDATA[
...
  <contents>
   <dir name="data">
    <file name="myrole.xml" role="customrole"/>
    <file name="someotherdata.csv" role="data"/>
   </dir>
  </contents>
...
    ]]>
   </programlisting>
  </para>
 </section>
</section>
